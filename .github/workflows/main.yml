name: Main

on:
  - push
  - pull_request

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PLATFORMS: 'linux/amd64,linux/arm64'
  # Note that env cannot be used in `jobs.<id>.if`, so we can't use a BUILD_IMAGES env to control the deploy steps.
  # We will build images on main or tags.
  # BUILD_IMAGES: ${{ (github.ref == 'refs/heads/main') || (startsWith(github.ref, 'refs/tags/v')) }}
  # We will push images on version tags in the edulinq org.
  PUSH_IMAGES: ${{ startsWith(github.ref, 'refs/tags/v') && (github.repository_owner == 'edulinq') }}

permissions:
  contents: read
  packages: write
  attestations: write
  id-token: write

jobs:

  test:
    name: Test
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-22.04', 'ubuntu-24.04', 'macos-13', 'macos-14', 'macos-15']

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21.0'

      - name: Check Version
        run: ./scripts/check_version.sh

      - name: Build
        run: ./scripts/build.sh

      - name: Check Formatting
        run: ./scripts/check_formatting.sh

      - name: Check Duplicate Locators
        run: ./scripts/check_duplicate_locators.sh

      - name: Run Base Tests
        env:
          AUTOGRADER__DOCKER__DISABLE: ${{ startsWith(matrix.os, 'macos') }}
          AUTOGRADER_TEST_RERUN_FLAKY: ${{ startsWith(matrix.os, 'macos') }}
        run: ./scripts/run_tests.sh

  deploy-prebuilt-image:
    name: Deploy Prebuilt Image
    needs: test
    if: ${{ (github.ref == 'refs/heads/main') || (startsWith(github.ref, 'refs/tags/v')) }}
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Get Vesion From Tag
        shell: bash {0}
        run: |
          # Stip 'v' prefix.
          version=${GITHUB_REF_NAME#v}

          # Store the result in the github actions env.
          echo "VERSION=${version}" >> $GITHUB_ENV

          # Check if this looks like a version tag.
          [[ ${GITHUB_REF_NAME} =~ ^v[0-9]+\.[0-9]+\.[0-9]+ ]]
          isVersionTag=$?

          # Output some information.
          echo "Tag: ${GITHUB_REF_NAME}"
          echo "Version: ${version}"
          echo "Push Images: ${PUSH_IMAGES}"
          echo "Is Version Tag: ${isVersionTag}"

          # Test that the tag looks like a version if we are pushing.
          [[ ${PUSH_IMAGES} != 'true' ]] || [[ ${isVersionTag} -eq 0 ]]

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          # See https://github.com/docker/setup-qemu-action/issues/198
          image: tonistiigi/binfmt:qemu-v7.0.0-28

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          file: docker/prebuilt/Dockerfile
          platforms: ${{ env.PLATFORMS }}
          push: ${{ env.PUSH_IMAGES }}
          tags: "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}-prebuilt"

      - name: Generate Artifact Attestation
        if: ${{ env.PUSH_IMAGES == 'true' }}
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  deploy-slim-image:
    name: Deploy Slim Image
    needs: test
    if: ${{ (github.ref == 'refs/heads/main') || (startsWith(github.ref, 'refs/tags/v')) }}
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Get Vesion From Tag
        shell: bash {0}
        run: |
          # Stip 'v' prefix.
          version=${GITHUB_REF_NAME#v}

          # Store the result in the github actions env.
          echo "VERSION=${version}" >> $GITHUB_ENV

          # Check if this looks like a version tag.
          [[ ${GITHUB_REF_NAME} =~ ^v[0-9]+\.[0-9]+\.[0-9]+ ]]
          isVersionTag=$?

          # Output some information.
          echo "Tag: ${GITHUB_REF_NAME}"
          echo "Version: ${version}"
          echo "Push Images: ${PUSH_IMAGES}"
          echo "Is Version Tag: ${isVersionTag}"

          # Test that the tag looks like a version if we are pushing.
          [[ ${PUSH_IMAGES} != 'true' ]] || [[ ${isVersionTag} -eq 0 ]]

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          # See https://github.com/docker/setup-qemu-action/issues/198
          image: tonistiigi/binfmt:qemu-v7.0.0-28

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          file: docker/slim/Dockerfile
          platforms: ${{ env.PLATFORMS }}
          push: ${{ env.PUSH_IMAGES }}
          tags: "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}-slim"

      - name: Generate Artifact Attestation
        if: ${{ env.PUSH_IMAGES == 'true' }}
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

{
    "endpoints": {
        "courses/admin/email": {
            "description": "Send an email to course users.",
            "input": [
                {
                    "field-name": "bcc",
                    "field-type": "[]string"
                },
                {
                    "field-name": "body",
                    "field-type": "string"
                },
                {
                    "field-name": "cc",
                    "field-type": "[]string"
                },
                {
                    "field-name": "course-id",
                    "field-type": "string"
                },
                {
                    "field-name": "dry-run",
                    "field-type": "bool"
                },
                {
                    "field-name": "html",
                    "field-type": "bool"
                },
                {
                    "field-name": "subject",
                    "field-type": "string"
                },
                {
                    "field-name": "to",
                    "field-type": "[]string"
                },
                {
                    "field-name": "user-email",
                    "field-type": "string"
                },
                {
                    "field-name": "user-pass",
                    "field-type": "string"
                }
            ],
            "output": [
                {
                    "field-name": "bcc",
                    "field-type": "[]string"
                },
                {
                    "field-name": "cc",
                    "field-type": "[]string"
                },
                {
                    "field-name": "to",
                    "field-type": "[]string"
                }
            ]
        },
        "courses/admin/update": {
            "description": "Update an existing course.",
            "input": [
                {
                    "field-name": "course-id",
                    "field-type": "string"
                },
                {
                    "field-name": "user-email",
                    "field-type": "string"
                },
                {
                    "field-name": "user-pass",
                    "field-type": "string"
                }
            ],
            "output": [
                {
                    "field-name": "result",
                    "field-type": "*courses.CourseUpsertResult"
                }
            ]
        },
        "courses/assignments/get": {
            "description": "Get the information for a course assignment.",
            "input": [
                {
                    "field-name": "assignment-id",
                    "field-type": "string"
                },
                {
                    "field-name": "course-id",
                    "field-type": "string"
                },
                {
                    "field-name": "user-email",
                    "field-type": "string"
                },
                {
                    "field-name": "user-pass",
                    "field-type": "string"
                }
            ],
            "output": [
                {
                    "field-name": "assignment",
                    "field-type": "*core.AssignmentInfo"
                }
            ]
        },
        "courses/assignments/list": {
            "description": "List the assignments in the course.",
            "input": [
                {
                    "field-name": "course-id",
                    "field-type": "string"
                },
                {
                    "field-name": "user-email",
                    "field-type": "string"
                },
                {
                    "field-name": "user-pass",
                    "field-type": "string"
                }
            ],
            "output": [
                {
                    "field-name": "assignments",
                    "field-type": "[]*core.AssignmentInfo"
                }
            ]
        },
        "courses/assignments/submissions/analysis/individual": {
            "description": "Get the result of a individual analysis for the specified submissions.",
            "input": [
                {
                    "field-name": "dry-run",
                    "field-type": "bool"
                },
                {
                    "field-name": "overwrite-cache",
                    "field-type": "bool"
                },
                {
                    "field-name": "submissions",
                    "field-type": "[]string"
                },
                {
                    "field-name": "user-email",
                    "field-type": "string"
                },
                {
                    "field-name": "user-pass",
                    "field-type": "string"
                },
                {
                    "field-name": "wait-for-completion",
                    "field-type": "bool"
                }
            ],
            "output": [
                {
                    "field-name": "complete",
                    "field-type": "bool"
                },
                {
                    "field-name": "options",
                    "field-type": "analysis.AnalysisOptions"
                },
                {
                    "field-name": "results",
                    "field-type": "[]*model.IndividualAnalysis"
                },
                {
                    "field-name": "summary",
                    "field-type": "*model.IndividualAnalysisSummary"
                }
            ]
        },
        "courses/assignments/submissions/analysis/pairwise": {
            "description": "Get the result of a pairwise analysis for the specified submissions.",
            "input": [
                {
                    "field-name": "dry-run",
                    "field-type": "bool"
                },
                {
                    "field-name": "overwrite-cache",
                    "field-type": "bool"
                },
                {
                    "field-name": "submissions",
                    "field-type": "[]string"
                },
                {
                    "field-name": "user-email",
                    "field-type": "string"
                },
                {
                    "field-name": "user-pass",
                    "field-type": "string"
                },
                {
                    "field-name": "wait-for-completion",
                    "field-type": "bool"
                }
            ],
            "output": [
                {
                    "field-name": "complete",
                    "field-type": "bool"
                },
                {
                    "field-name": "options",
                    "field-type": "analysis.AnalysisOptions"
                },
                {
                    "field-name": "results",
                    "field-type": "[]*model.PairwiseAnalysis"
                },
                {
                    "field-name": "summary",
                    "field-type": "*model.PairwiseAnalysisSummary"
                }
            ]
        },
        "courses/assignments/submissions/fetch/course/attempts": {
            "description": "Get all recent submissions and grading information for this assignment.",
            "input": [
                {
                    "field-name": "assignment-id",
                    "field-type": "string"
                },
                {
                    "field-name": "course-id",
                    "field-type": "string"
                },
                {
                    "field-name": "filter-role",
                    "field-type": "int"
                },
                {
                    "field-name": "user-email",
                    "field-type": "string"
                },
                {
                    "field-name": "user-pass",
                    "field-type": "string"
                }
            ],
            "output": [
                {
                    "field-name": "grading-results",
                    "field-type": "map[string]*model.GradingResult"
                }
            ]
        },
        "courses/assignments/submissions/fetch/course/scores": {
            "description": "Get a summary of the most recent scores for this assignment.",
            "input": [
                {
                    "field-name": "assignment-id",
                    "field-type": "string"
                },
                {
                    "field-name": "course-id",
                    "field-type": "string"
                },
                {
                    "field-name": "filter-role",
                    "field-type": "int"
                },
                {
                    "field-name": "user-email",
                    "field-type": "string"
                },
                {
                    "field-name": "user-pass",
                    "field-type": "string"
                }
            ],
            "output": [
                {
                    "field-name": "submission-infos",
                    "field-type": "map[string]*model.SubmissionHistoryItem"
                }
            ]
        },
        "courses/assignments/submissions/fetch/user/attempt": {
            "description": "Get a submission along with all grading information.",
            "input": [
                {
                    "field-name": "assignment-id",
                    "field-type": "string"
                },
                {
                    "field-name": "course-id",
                    "field-type": "string"
                },
                {
                    "field-name": "target-email",
                    "field-type": "core.TargetCourseUserSelfOrGrader"
                },
                {
                    "field-name": "target-submission",
                    "field-type": "string"
                },
                {
                    "field-name": "user-email",
                    "field-type": "string"
                },
                {
                    "field-name": "user-pass",
                    "field-type": "string"
                }
            ],
            "output": [
                {
                    "field-name": "found-submission",
                    "field-type": "bool"
                },
                {
                    "field-name": "found-user",
                    "field-type": "bool"
                },
                {
                    "field-name": "grading-result",
                    "field-type": "*model.GradingResult"
                }
            ]
        },
        "courses/assignments/submissions/fetch/user/attempts": {
            "description": "Get all submission attempts made by a user along with all grading information.",
            "input": [
                {
                    "field-name": "assignment-id",
                    "field-type": "string"
                },
                {
                    "field-name": "course-id",
                    "field-type": "string"
                },
                {
                    "field-name": "target-email",
                    "field-type": "core.TargetCourseUserSelfOrGrader"
                },
                {
                    "field-name": "user-email",
                    "field-type": "string"
                },
                {
                    "field-name": "user-pass",
                    "field-type": "string"
                }
            ],
            "output": [
                {
                    "field-name": "found-user",
                    "field-type": "bool"
                },
                {
                    "field-name": "grading-results",
                    "field-type": "[]*model.GradingResult"
                }
            ]
        },
        "courses/assignments/submissions/fetch/user/history": {
            "description": "Get a summary of the submissions for this assignment.",
            "input": [
                {
                    "field-name": "assignment-id",
                    "field-type": "string"
                },
                {
                    "field-name": "course-id",
                    "field-type": "string"
                },
                {
                    "field-name": "target-email",
                    "field-type": "core.TargetCourseUserSelfOrGrader"
                },
                {
                    "field-name": "user-email",
                    "field-type": "string"
                },
                {
                    "field-name": "user-pass",
                    "field-type": "string"
                }
            ],
            "output": [
                {
                    "field-name": "found-user",
                    "field-type": "bool"
                },
                {
                    "field-name": "history",
                    "field-type": "[]*model.SubmissionHistoryItem"
                }
            ]
        },
        "courses/assignments/submissions/fetch/user/peek": {
            "description": "Get a copy of the grading report for the specified submission. Does not submit a new submission.",
            "input": [
                {
                    "field-name": "assignment-id",
                    "field-type": "string"
                },
                {
                    "field-name": "course-id",
                    "field-type": "string"
                },
                {
                    "field-name": "target-email",
                    "field-type": "core.TargetCourseUserSelfOrGrader"
                },
                {
                    "field-name": "target-submission",
                    "field-type": "string"
                },
                {
                    "field-name": "user-email",
                    "field-type": "string"
                },
                {
                    "field-name": "user-pass",
                    "field-type": "string"
                }
            ],
            "output": [
                {
                    "field-name": "found-submission",
                    "field-type": "bool"
                },
                {
                    "field-name": "found-user",
                    "field-type": "bool"
                },
                {
                    "field-name": "submission-result",
                    "field-type": "*model.GradingInfo"
                }
            ]
        },
        "courses/assignments/submissions/proxy/resubmit": {
            "description": "Proxy resubmit an assignment submission to the autograder.",
            "input": [
                {
                    "field-name": "assignment-id",
                    "field-type": "string"
                },
                {
                    "field-name": "course-id",
                    "field-type": "string"
                },
                {
                    "field-name": "proxy-email",
                    "field-type": "core.TargetCourseUser"
                },
                {
                    "field-name": "proxy-time",
                    "field-type": "int64"
                },
                {
                    "field-name": "target-submission",
                    "field-type": "string"
                },
                {
                    "field-name": "user-email",
                    "field-type": "string"
                },
                {
                    "field-name": "user-pass",
                    "field-type": "string"
                }
            ],
            "output": [
                {
                    "field-name": "found-submission",
                    "field-type": "bool"
                },
                {
                    "field-name": "found-user",
                    "field-type": "bool"
                },
                {
                    "field-name": "grading-success",
                    "field-type": "bool"
                },
                {
                    "field-name": "message",
                    "field-type": "string"
                },
                {
                    "field-name": "rejected",
                    "field-type": "bool"
                },
                {
                    "field-name": "result",
                    "field-type": "*model.GradingInfo"
                }
            ]
        },
        "courses/assignments/submissions/proxy/submit": {
            "description": "Proxy submit an assignment submission to the autograder.",
            "input": [
                {
                    "field-name": "assignment-id",
                    "field-type": "string"
                },
                {
                    "field-name": "course-id",
                    "field-type": "string"
                },
                {
                    "field-name": "message",
                    "field-type": "string"
                },
                {
                    "field-name": "proxy-email",
                    "field-type": "core.TargetCourseUser"
                },
                {
                    "field-name": "proxy-time",
                    "field-type": "int64"
                },
                {
                    "field-name": "user-email",
                    "field-type": "string"
                },
                {
                    "field-name": "user-pass",
                    "field-type": "string"
                }
            ],
            "output": [
                {
                    "field-name": "found-user",
                    "field-type": "bool"
                },
                {
                    "field-name": "grading-success",
                    "field-type": "bool"
                },
                {
                    "field-name": "message",
                    "field-type": "string"
                },
                {
                    "field-name": "rejected",
                    "field-type": "bool"
                },
                {
                    "field-name": "result",
                    "field-type": "*model.GradingInfo"
                }
            ]
        },
        "courses/assignments/submissions/remove": {
            "description": "Remove a specified submission. Defaults to the most recent submission.",
            "input": [
                {
                    "field-name": "assignment-id",
                    "field-type": "string"
                },
                {
                    "field-name": "course-id",
                    "field-type": "string"
                },
                {
                    "field-name": "target-email",
                    "field-type": "core.TargetCourseUserSelfOrGrader"
                },
                {
                    "field-name": "target-submission",
                    "field-type": "string"
                },
                {
                    "field-name": "user-email",
                    "field-type": "string"
                },
                {
                    "field-name": "user-pass",
                    "field-type": "string"
                }
            ],
            "output": [
                {
                    "field-name": "found-submission",
                    "field-type": "bool"
                },
                {
                    "field-name": "found-user",
                    "field-type": "bool"
                }
            ]
        },
        "courses/assignments/submissions/submit": {
            "description": "Submit an assignment submission to the autograder.",
            "input": [
                {
                    "field-name": "allow-late",
                    "field-type": "bool"
                },
                {
                    "field-name": "assignment-id",
                    "field-type": "string"
                },
                {
                    "field-name": "course-id",
                    "field-type": "string"
                },
                {
                    "field-name": "message",
                    "field-type": "string"
                },
                {
                    "field-name": "user-email",
                    "field-type": "string"
                },
                {
                    "field-name": "user-pass",
                    "field-type": "string"
                }
            ],
            "output": [
                {
                    "field-name": "grading-success",
                    "field-type": "bool"
                },
                {
                    "field-name": "message",
                    "field-type": "string"
                },
                {
                    "field-name": "rejected",
                    "field-type": "bool"
                },
                {
                    "field-name": "result",
                    "field-type": "*model.GradingInfo"
                }
            ]
        },
        "courses/lms/scores/upload": {
            "description": "Perform a full scoring and upload scores to the course's LMS.",
            "input": [
                {
                    "field-name": "course-id",
                    "field-type": "string"
                },
                {
                    "field-name": "dry-run",
                    "field-type": "bool"
                },
                {
                    "field-name": "user-email",
                    "field-type": "string"
                },
                {
                    "field-name": "user-pass",
                    "field-type": "string"
                }
            ],
            "output": [
                {
                    "field-name": "dry-run",
                    "field-type": "bool"
                },
                {
                    "field-name": "results",
                    "field-type": "[]*model.ExternalScoringInfo"
                }
            ]
        },
        "courses/stats/query": {
            "description": "Query metrics for a specific course.\nOnly the context course can be queried for, the target-course field will be ignored for this endpoint.",
            "input": [
                {
                    "field-name": "after",
                    "field-type": "int64"
                },
                {
                    "field-name": "before",
                    "field-type": "int64"
                },
                {
                    "field-name": "course-id",
                    "field-type": "string"
                },
                {
                    "field-name": "limit",
                    "field-type": "int"
                },
                {
                    "field-name": "sort",
                    "field-type": "int"
                },
                {
                    "field-name": "type",
                    "field-type": "string"
                },
                {
                    "field-name": "user-email",
                    "field-type": "string"
                },
                {
                    "field-name": "user-pass",
                    "field-type": "string"
                },
                {
                    "field-name": "where",
                    "field-type": "map[stats.MetricAttribute]interface {}"
                }
            ],
            "output": [
                {
                    "field-name": "results",
                    "field-type": "[]*stats.Metric"
                }
            ]
        },
        "courses/upsert/filespec": {
            "description": "Upsert a course using a filespec.",
            "input": [
                {
                    "field-name": "dry-run",
                    "field-type": "bool"
                },
                {
                    "field-name": "filespec",
                    "field-type": "util.FileSpec"
                },
                {
                    "field-name": "skip-build-images",
                    "field-type": "bool"
                },
                {
                    "field-name": "skip-emails",
                    "field-type": "bool"
                },
                {
                    "field-name": "skip-lms-sync",
                    "field-type": "bool"
                },
                {
                    "field-name": "skip-source-sync",
                    "field-type": "bool"
                },
                {
                    "field-name": "skip-template-files",
                    "field-type": "bool"
                },
                {
                    "field-name": "user-email",
                    "field-type": "string"
                },
                {
                    "field-name": "user-pass",
                    "field-type": "string"
                }
            ],
            "output": [
                {
                    "field-name": "results",
                    "field-type": "[]courses.CourseUpsertResult"
                }
            ]
        },
        "courses/upsert/zip": {
            "description": "Upsert a course using a zip file.",
            "input": [
                {
                    "field-name": "dry-run",
                    "field-type": "bool"
                },
                {
                    "field-name": "skip-build-images",
                    "field-type": "bool"
                },
                {
                    "field-name": "skip-emails",
                    "field-type": "bool"
                },
                {
                    "field-name": "skip-lms-sync",
                    "field-type": "bool"
                },
                {
                    "field-name": "skip-source-sync",
                    "field-type": "bool"
                },
                {
                    "field-name": "skip-template-files",
                    "field-type": "bool"
                },
                {
                    "field-name": "user-email",
                    "field-type": "string"
                },
                {
                    "field-name": "user-pass",
                    "field-type": "string"
                }
            ],
            "output": [
                {
                    "field-name": "results",
                    "field-type": "[]courses.CourseUpsertResult"
                }
            ]
        },
        "courses/users/drop": {
            "description": "Drop a user from the course.",
            "input": [
                {
                    "field-name": "course-id",
                    "field-type": "string"
                },
                {
                    "field-name": "target-email",
                    "field-type": "core.TargetCourseUser"
                },
                {
                    "field-name": "user-email",
                    "field-type": "string"
                },
                {
                    "field-name": "user-pass",
                    "field-type": "string"
                }
            ],
            "output": [
                {
                    "field-name": "found-user",
                    "field-type": "bool"
                }
            ]
        },
        "courses/users/enroll": {
            "description": "Enroll one or more users to the course.",
            "input": [
                {
                    "field-name": "course-id",
                    "field-type": "string"
                },
                {
                    "field-name": "dry-run",
                    "field-type": "bool"
                },
                {
                    "field-name": "raw-course-users",
                    "field-type": "[]*model.RawCourseUserData"
                },
                {
                    "field-name": "send-emails",
                    "field-type": "bool"
                },
                {
                    "field-name": "skip-inserts",
                    "field-type": "bool"
                },
                {
                    "field-name": "skip-updates",
                    "field-type": "bool"
                },
                {
                    "field-name": "user-email",
                    "field-type": "string"
                },
                {
                    "field-name": "user-pass",
                    "field-type": "string"
                }
            ],
            "output": [
                {
                    "field-name": "results",
                    "field-type": "[]*model.ExternalUserOpResult"
                }
            ]
        },
        "courses/users/get": {
            "description": "Get the information for a course user.",
            "input": [
                {
                    "field-name": "course-id",
                    "field-type": "string"
                },
                {
                    "field-name": "target-email",
                    "field-type": "core.TargetCourseUserSelfOrGrader"
                },
                {
                    "field-name": "user-email",
                    "field-type": "string"
                },
                {
                    "field-name": "user-pass",
                    "field-type": "string"
                }
            ],
            "output": [
                {
                    "field-name": "found",
                    "field-type": "bool"
                },
                {
                    "field-name": "user",
                    "field-type": "*core.CourseUserInfo"
                }
            ]
        },
        "courses/users/list": {
            "description": "List the users in the course.",
            "input": [
                {
                    "field-name": "course-id",
                    "field-type": "string"
                },
                {
                    "field-name": "user-email",
                    "field-type": "string"
                },
                {
                    "field-name": "user-pass",
                    "field-type": "string"
                }
            ],
            "output": [
                {
                    "field-name": "users",
                    "field-type": "[]*core.CourseUserInfo"
                }
            ]
        },
        "lms/upload/scores": {
            "description": "Upload scores from a tab-separated file to the course's LMS.\nThe file should not have headers, and should have two columns: email and score.",
            "input": [
                {
                    "field-name": "assignment-lms-id",
                    "field-type": "string"
                },
                {
                    "field-name": "course-id",
                    "field-type": "string"
                },
                {
                    "field-name": "scores",
                    "field-type": "[]upload.ScoreEntry"
                },
                {
                    "field-name": "user-email",
                    "field-type": "string"
                },
                {
                    "field-name": "user-pass",
                    "field-type": "string"
                }
            ],
            "output": [
                {
                    "field-name": "count",
                    "field-type": "int"
                },
                {
                    "field-name": "error-count",
                    "field-type": "int"
                },
                {
                    "field-name": "no-lms-id-users",
                    "field-type": "[]upload.RowEntry"
                },
                {
                    "field-name": "unrecognized-users",
                    "field-type": "[]upload.RowEntry"
                }
            ]
        },
        "lms/user/get": {
            "description": "Get information for an LMS user.",
            "input": [
                {
                    "field-name": "course-id",
                    "field-type": "string"
                },
                {
                    "field-name": "target-email",
                    "field-type": "core.TargetCourseUser"
                },
                {
                    "field-name": "user-email",
                    "field-type": "string"
                },
                {
                    "field-name": "user-pass",
                    "field-type": "string"
                }
            ],
            "output": [
                {
                    "field-name": "found-autograder-user",
                    "field-type": "bool"
                },
                {
                    "field-name": "found-lms-user",
                    "field-type": "bool"
                },
                {
                    "field-name": "user",
                    "field-type": "*core.CourseUserInfo"
                }
            ]
        },
        "logs/query": {
            "description": "Query log entries from the autograder server.",
            "input": [
                {
                    "field-name": "after",
                    "field-type": "string"
                },
                {
                    "field-name": "level",
                    "field-type": "string"
                },
                {
                    "field-name": "past",
                    "field-type": "string"
                },
                {
                    "field-name": "target-assignment",
                    "field-type": "string"
                },
                {
                    "field-name": "target-course",
                    "field-type": "string"
                },
                {
                    "field-name": "target-email",
                    "field-type": "string"
                },
                {
                    "field-name": "user-email",
                    "field-type": "string"
                },
                {
                    "field-name": "user-pass",
                    "field-type": "string"
                }
            ],
            "output": [
                {
                    "field-name": "error",
                    "field-type": "*model.ExternalLocatableError"
                },
                {
                    "field-name": "results",
                    "field-type": "[]*log.Record"
                },
                {
                    "field-name": "success",
                    "field-type": "bool"
                }
            ]
        },
        "metadata/describe": {
            "description": "Describe all endpoints on the server.",
            "input": [],
            "output": [
                {
                    "field-name": "endpoints",
                    "field-type": "map[string]core.EndpointDescription"
                },
                {
                    "field-name": "types",
                    "field-type": "map[string]core.FullTypeDescription"
                }
            ]
        },
        "stats/query": {
            "description": "Query stats for the server.",
            "input": [
                {
                    "field-name": "after",
                    "field-type": "int64"
                },
                {
                    "field-name": "before",
                    "field-type": "int64"
                },
                {
                    "field-name": "limit",
                    "field-type": "int"
                },
                {
                    "field-name": "sort",
                    "field-type": "int"
                },
                {
                    "field-name": "type",
                    "field-type": "string"
                },
                {
                    "field-name": "user-email",
                    "field-type": "string"
                },
                {
                    "field-name": "user-pass",
                    "field-type": "string"
                },
                {
                    "field-name": "where",
                    "field-type": "map[stats.MetricAttribute]interface {}"
                }
            ],
            "output": [
                {
                    "field-name": "results",
                    "field-type": "[]*stats.Metric"
                }
            ]
        },
        "system/stacks": {
            "description": "Get stack traces for all the currently running routines (threads) on the server.",
            "input": [
                {
                    "field-name": "user-email",
                    "field-type": "string"
                },
                {
                    "field-name": "user-pass",
                    "field-type": "string"
                }
            ],
            "output": [
                {
                    "field-name": "count",
                    "field-type": "int"
                },
                {
                    "field-name": "stacks",
                    "field-type": "[]*util.CallStack"
                }
            ]
        },
        "users/auth": {
            "description": "Authenticate as a user.",
            "input": [
                {
                    "field-name": "user-email",
                    "field-type": "string"
                },
                {
                    "field-name": "user-pass",
                    "field-type": "string"
                }
            ],
            "output": [
                {
                    "field-name": "success",
                    "field-type": "bool"
                }
            ]
        },
        "users/get": {
            "description": "Get the information for a server user.",
            "input": [
                {
                    "field-name": "target-email",
                    "field-type": "core.TargetServerUserSelfOrAdmin"
                },
                {
                    "field-name": "user-email",
                    "field-type": "string"
                },
                {
                    "field-name": "user-pass",
                    "field-type": "string"
                }
            ],
            "output": [
                {
                    "field-name": "courses",
                    "field-type": "map[string]*core.CourseInfo"
                },
                {
                    "field-name": "found",
                    "field-type": "bool"
                },
                {
                    "field-name": "user",
                    "field-type": "*core.ServerUserInfo"
                }
            ]
        },
        "users/list": {
            "description": "List the users on the server.",
            "input": [
                {
                    "field-name": "user-email",
                    "field-type": "string"
                },
                {
                    "field-name": "user-pass",
                    "field-type": "string"
                }
            ],
            "output": [
                {
                    "field-name": "users",
                    "field-type": "[]*core.ServerUserInfo"
                }
            ]
        },
        "users/password/change": {
            "description": "Change your password to the one provided.",
            "input": [
                {
                    "field-name": "new-pass",
                    "field-type": "string"
                },
                {
                    "field-name": "user-email",
                    "field-type": "string"
                },
                {
                    "field-name": "user-pass",
                    "field-type": "string"
                }
            ],
            "output": [
                {
                    "field-name": "duplicate",
                    "field-type": "bool"
                },
                {
                    "field-name": "success",
                    "field-type": "bool"
                }
            ]
        },
        "users/password/reset": {
            "description": "Reset to a random password that will be emailed to you.",
            "input": [
                {
                    "field-name": "user-email",
                    "field-type": "string"
                }
            ],
            "output": []
        },
        "users/remove": {
            "description": "Remove a user from the server.",
            "input": [
                {
                    "field-name": "target-email",
                    "field-type": "core.TargetServerUser"
                },
                {
                    "field-name": "user-email",
                    "field-type": "string"
                },
                {
                    "field-name": "user-pass",
                    "field-type": "string"
                }
            ],
            "output": [
                {
                    "field-name": "found-user",
                    "field-type": "bool"
                }
            ]
        },
        "users/tokens/create": {
            "description": "Create a new authentication token.",
            "input": [
                {
                    "field-name": "name",
                    "field-type": "string"
                },
                {
                    "field-name": "user-email",
                    "field-type": "string"
                },
                {
                    "field-name": "user-pass",
                    "field-type": "string"
                }
            ],
            "output": [
                {
                    "field-name": "token-cleartext",
                    "field-type": "string"
                },
                {
                    "field-name": "token-id",
                    "field-type": "string"
                }
            ]
        },
        "users/tokens/delete": {
            "description": "Delete an authentication token.",
            "input": [
                {
                    "field-name": "token-id",
                    "field-type": "string"
                },
                {
                    "field-name": "user-email",
                    "field-type": "string"
                },
                {
                    "field-name": "user-pass",
                    "field-type": "string"
                }
            ],
            "output": [
                {
                    "field-name": "found",
                    "field-type": "bool"
                }
            ]
        },
        "users/upsert": {
            "description": "Upsert one or more users to the server (update if exists, insert otherwise).",
            "input": [
                {
                    "field-name": "dry-run",
                    "field-type": "bool"
                },
                {
                    "field-name": "raw-users",
                    "field-type": "[]*model.RawServerUserData"
                },
                {
                    "field-name": "send-emails",
                    "field-type": "bool"
                },
                {
                    "field-name": "skip-inserts",
                    "field-type": "bool"
                },
                {
                    "field-name": "skip-updates",
                    "field-type": "bool"
                },
                {
                    "field-name": "user-email",
                    "field-type": "string"
                },
                {
                    "field-name": "user-pass",
                    "field-type": "string"
                }
            ],
            "output": [
                {
                    "field-name": "results",
                    "field-type": "[]*model.ExternalUserOpResult"
                }
            ]
        }
    },
    "types": {
        "analysis.AnalysisOptions": {
            "category": "struct",
            "fields": [
                {
                    "field-name": "dry-run",
                    "field-type": "bool"
                },
                {
                    "field-name": "overwrite-cache",
                    "field-type": "bool"
                },
                {
                    "field-name": "submissions",
                    "field-type": "[]string"
                },
                {
                    "field-name": "wait-for-completion",
                    "field-type": "bool"
                }
            ]
        },
        "core.APIDescription": {
            "category": "struct",
            "fields": [
                {
                    "field-name": "endpoints",
                    "field-type": "map[string]core.EndpointDescription"
                },
                {
                    "field-name": "types",
                    "field-type": "map[string]core.FullTypeDescription"
                }
            ]
        },
        "core.APIRequestAssignmentContext": {
            "category": "struct",
            "description": "Context for requests that need an assignment on top of a user/course.",
            "fields": [
                {
                    "field-name": "assignment-id",
                    "field-type": "string"
                },
                {
                    "field-name": "course-id",
                    "field-type": "string"
                },
                {
                    "field-name": "user-email",
                    "field-type": "string"
                },
                {
                    "field-name": "user-pass",
                    "field-type": "string"
                }
            ]
        },
        "core.APIRequestCourseUserContext": {
            "category": "struct",
            "description": "Context for a request that has a course and user from that course.",
            "fields": [
                {
                    "field-name": "course-id",
                    "field-type": "string"
                },
                {
                    "field-name": "user-email",
                    "field-type": "string"
                },
                {
                    "field-name": "user-pass",
                    "field-type": "string"
                }
            ]
        },
        "core.APIRequestUserContext": {
            "category": "struct",
            "description": "Context for a request that has a user (pretty much the lowest level of request).",
            "fields": [
                {
                    "field-name": "user-email",
                    "field-type": "string"
                },
                {
                    "field-name": "user-pass",
                    "field-type": "string"
                }
            ]
        },
        "core.AssignmentInfo": {
            "category": "struct",
            "fields": [
                {
                    "field-name": "due-date",
                    "field-type": "int64"
                },
                {
                    "field-name": "id",
                    "field-type": "string"
                },
                {
                    "field-name": "max-points",
                    "field-type": "float64"
                },
                {
                    "field-name": "name",
                    "field-type": "string"
                }
            ]
        },
        "core.BaseSubmitResponse": {
            "category": "struct",
            "fields": [
                {
                    "field-name": "grading-success",
                    "field-type": "bool"
                },
                {
                    "field-name": "message",
                    "field-type": "string"
                },
                {
                    "field-name": "rejected",
                    "field-type": "bool"
                },
                {
                    "field-name": "result",
                    "field-type": "*model.GradingInfo"
                }
            ]
        },
        "core.BaseUserInfo": {
            "category": "struct",
            "description": "This type must be embedded into any API-safe representation of a user.",
            "fields": [
                {
                    "field-name": "email",
                    "field-type": "string"
                },
                {
                    "field-name": "name",
                    "field-type": "string"
                },
                {
                    "field-name": "type",
                    "field-type": "string"
                }
            ]
        },
        "core.CourseInfo": {
            "category": "struct",
            "fields": [
                {
                    "field-name": "assignments",
                    "field-type": "map[string]*core.AssignmentInfo"
                },
                {
                    "field-name": "id",
                    "field-type": "string"
                },
                {
                    "field-name": "name",
                    "field-type": "string"
                }
            ]
        },
        "core.CourseUserInfo": {
            "category": "struct",
            "description": "An API-safe representation of a course user.\nEmbed the BaseUserInfo and use CourseUserInfoType as the type.",
            "fields": [
                {
                    "field-name": "email",
                    "field-type": "string"
                },
                {
                    "field-name": "lms-id",
                    "field-type": "string"
                },
                {
                    "field-name": "name",
                    "field-type": "string"
                },
                {
                    "field-name": "role",
                    "field-type": "int"
                },
                {
                    "field-name": "type",
                    "field-type": "string"
                }
            ]
        },
        "core.EndpointDescription": {
            "category": "struct",
            "fields": [
                {
                    "field-name": "description",
                    "field-type": "string"
                },
                {
                    "field-name": "input",
                    "field-type": "[]core.TypeDescription"
                },
                {
                    "field-name": "output",
                    "field-type": "[]core.TypeDescription"
                }
            ]
        },
        "core.EnrollmentInfo": {
            "category": "struct",
            "description": "An API-safe representation of enrollment information.",
            "fields": [
                {
                    "field-name": "id",
                    "field-type": "string"
                },
                {
                    "field-name": "role",
                    "field-type": "int"
                }
            ]
        },
        "core.FullTypeDescription": {
            "category": "struct",
            "fields": [
                {
                    "field-name": "alias-type",
                    "field-type": "string"
                },
                {
                    "field-name": "category",
                    "field-type": "string"
                },
                {
                    "field-name": "description",
                    "field-type": "string"
                },
                {
                    "field-name": "element-type",
                    "field-type": "string"
                },
                {
                    "field-name": "fields",
                    "field-type": "[]core.TypeDescription"
                }
            ]
        },
        "core.NonEmptyString": {
            "alias-type": "string",
            "category": "alias"
        },
        "core.ServerUserInfo": {
            "category": "struct",
            "description": "An API-safe representation of a server user.\nEmbed the BaseUserInfo and use ServerUserInfoType as the type.",
            "fields": [
                {
                    "field-name": "courses",
                    "field-type": "map[string]core.EnrollmentInfo"
                },
                {
                    "field-name": "email",
                    "field-type": "string"
                },
                {
                    "field-name": "name",
                    "field-type": "string"
                },
                {
                    "field-name": "role",
                    "field-type": "int"
                },
                {
                    "field-name": "type",
                    "field-type": "string"
                }
            ]
        },
        "core.TargetCourseUser": {
            "category": "struct",
            "description": "A request having a field of this type indicates that the request is targeting a specific course user.\nThis type serializes to/from a string.\nA user's email must be specified, but no error is generated if the user is not found.\nThe existence of this type in a struct also indicates that the request is at least a APIRequestCourseUserContext."
        },
        "core.TargetCourseUserSelfOrGrader": {
            "category": "struct",
            "description": "Same as TargetServerUserSelfOrAdmin, but in the context of a course user and a grader context user.\nTherefore, the context user only has to be a grader in the context course (or the target user themself).\nWhen targeting yourself, the user can be a server admin (and will be escalated to course owner for the request).\nThe existence of this type in a struct also indicates that the request is at least a APIRequestCourseUserContext.",
            "fields": [
                {
                    "field-name": "TargetCourseUser",
                    "field-type": "core.TargetCourseUser"
                }
            ]
        },
        "core.TargetServerUser": {
            "category": "struct",
            "description": "A request having a field of this type indicates that the request is targeting a specific server user.\nThis type serializes to/from a string.\nA user's email must be specified, but no error is generated if the user is not found.\nThe existence of this type in a struct also indicates that the request is at least a APIRequestUserContext."
        },
        "core.TargetServerUserSelfOrAdmin": {
            "category": "struct",
            "description": "A request having a field of this type indicates that the request is targeting a specific user.\nThis type serializes to/from a string.\nIf no user is specified, then the context user is the target.\nIf a user is specified, then the context user must be a server admin\n(any user can access their own resources, but higher permissions are required to access another user's resources).\nNo error is generated if the user is not found.\nThe existence of this type in a struct also indicates that the request is at least a APIRequestUserContext.",
            "fields": [
                {
                    "field-name": "TargetServerUser",
                    "field-type": "core.TargetServerUser"
                }
            ]
        },
        "core.TypeDescription": {
            "category": "struct",
            "fields": [
                {
                    "field-name": "field-name",
                    "field-type": "string"
                },
                {
                    "field-name": "field-type",
                    "field-type": "string"
                }
            ]
        },
        "core.UserInfoType": {
            "alias-type": "string",
            "category": "alias"
        },
        "courses.CourseUpsertOptions": {
            "category": "struct",
            "fields": [
                {
                    "field-name": "dry-run",
                    "field-type": "bool"
                },
                {
                    "field-name": "skip-build-images",
                    "field-type": "bool"
                },
                {
                    "field-name": "skip-emails",
                    "field-type": "bool"
                },
                {
                    "field-name": "skip-lms-sync",
                    "field-type": "bool"
                },
                {
                    "field-name": "skip-source-sync",
                    "field-type": "bool"
                },
                {
                    "field-name": "skip-template-files",
                    "field-type": "bool"
                }
            ]
        },
        "courses.CourseUpsertPublicOptions": {
            "category": "struct",
            "fields": [
                {
                    "field-name": "dry-run",
                    "field-type": "bool"
                },
                {
                    "field-name": "skip-build-images",
                    "field-type": "bool"
                },
                {
                    "field-name": "skip-emails",
                    "field-type": "bool"
                },
                {
                    "field-name": "skip-lms-sync",
                    "field-type": "bool"
                },
                {
                    "field-name": "skip-source-sync",
                    "field-type": "bool"
                },
                {
                    "field-name": "skip-template-files",
                    "field-type": "bool"
                }
            ]
        },
        "courses.CourseUpsertResult": {
            "category": "struct",
            "fields": [
                {
                    "field-name": "assignment-template-files",
                    "field-type": "map[string][]string"
                },
                {
                    "field-name": "built-assignment-images",
                    "field-type": "[]string"
                },
                {
                    "field-name": "course-id",
                    "field-type": "string"
                },
                {
                    "field-name": "created",
                    "field-type": "bool"
                },
                {
                    "field-name": "lms-sync-result",
                    "field-type": "*model.LMSSyncResult"
                },
                {
                    "field-name": "message",
                    "field-type": "string"
                },
                {
                    "field-name": "success",
                    "field-type": "bool"
                },
                {
                    "field-name": "updated",
                    "field-type": "bool"
                }
            ]
        },
        "email.Message": {
            "category": "struct",
            "fields": [
                {
                    "field-name": "bcc",
                    "field-type": "[]string"
                },
                {
                    "field-name": "body",
                    "field-type": "string"
                },
                {
                    "field-name": "cc",
                    "field-type": "[]string"
                },
                {
                    "field-name": "html",
                    "field-type": "bool"
                },
                {
                    "field-name": "subject",
                    "field-type": "string"
                },
                {
                    "field-name": "to",
                    "field-type": "[]string"
                }
            ]
        },
        "log.LogLevel": {
            "alias-type": "int32",
            "category": "alias"
        },
        "log.RawLogQuery": {
            "category": "struct",
            "description": "A representation of a query for server log records.\nA raw query can be processed (validated for structure and permissions)\nby the internal/procedures/log package.\nBecause of some assumptions we make, log times before UNIX epoch are not supported.\nHowever, since this code was created well past that only time travelers should be concerned.",
            "fields": [
                {
                    "field-name": "after",
                    "field-type": "string"
                },
                {
                    "field-name": "level",
                    "field-type": "string"
                },
                {
                    "field-name": "past",
                    "field-type": "string"
                },
                {
                    "field-name": "target-assignment",
                    "field-type": "string"
                },
                {
                    "field-name": "target-course",
                    "field-type": "string"
                },
                {
                    "field-name": "target-email",
                    "field-type": "string"
                }
            ]
        },
        "log.Record": {
            "category": "struct",
            "fields": [
                {
                    "field-name": "assignment",
                    "field-type": "string"
                },
                {
                    "field-name": "attributes",
                    "field-type": "map[string]interface {}"
                },
                {
                    "field-name": "course",
                    "field-type": "string"
                },
                {
                    "field-name": "error",
                    "field-type": "string"
                },
                {
                    "field-name": "level",
                    "field-type": "int32"
                },
                {
                    "field-name": "message",
                    "field-type": "string"
                },
                {
                    "field-name": "timestamp",
                    "field-type": "int64"
                },
                {
                    "field-name": "user",
                    "field-type": "string"
                }
            ]
        },
        "model.AnalysisFileInfo": {
            "category": "struct",
            "fields": [
                {
                    "field-name": "filename",
                    "field-type": "string"
                },
                {
                    "field-name": "lines-of-code",
                    "field-type": "int"
                },
                {
                    "field-name": "original-filename",
                    "field-type": "string"
                }
            ]
        },
        "model.AnalysisSummary": {
            "category": "struct",
            "fields": [
                {
                    "field-name": "complete",
                    "field-type": "bool"
                },
                {
                    "field-name": "complete-count",
                    "field-type": "int"
                },
                {
                    "field-name": "failure-count",
                    "field-type": "int"
                },
                {
                    "field-name": "first-timestamp",
                    "field-type": "int64"
                },
                {
                    "field-name": "last-timestamp",
                    "field-type": "int64"
                },
                {
                    "field-name": "pending-count",
                    "field-type": "int"
                }
            ]
        },
        "model.AssignmentAnalysisOptions": {
            "category": "struct",
            "fields": [
                {
                    "field-name": "exclude-patterns",
                    "field-type": "[]string"
                },
                {
                    "field-name": "include-patterns",
                    "field-type": "[]string"
                },
                {
                    "field-name": "template-file-ops",
                    "field-type": "[]*util.FileOperation"
                },
                {
                    "field-name": "template-files",
                    "field-type": "[]*util.FileSpec"
                }
            ]
        },
        "model.AssignmentInfo": {
            "category": "struct",
            "fields": [
                {
                    "field-name": "id",
                    "field-type": "string"
                },
                {
                    "field-name": "late-days-lms-id",
                    "field-type": "string"
                },
                {
                    "field-name": "late-days-lms-name",
                    "field-type": "string"
                },
                {
                    "field-name": "name",
                    "field-type": "string"
                }
            ]
        },
        "model.AssignmentSyncResult": {
            "category": "struct",
            "fields": [
                {
                    "field-name": "ambiguous-matches",
                    "field-type": "[]model.AssignmentInfo"
                },
                {
                    "field-name": "non-matched-assignments",
                    "field-type": "[]model.AssignmentInfo"
                },
                {
                    "field-name": "synced-assignments",
                    "field-type": "[]model.AssignmentInfo"
                },
                {
                    "field-name": "unchanged-assignments",
                    "field-type": "[]model.AssignmentInfo"
                }
            ]
        },
        "model.BaseUserOpResult": {
            "category": "struct",
            "description": "A general representation of the result of operations that modify a user in any way (add, remove, enroll, drop, etc).",
            "fields": [
                {
                    "field-name": "added",
                    "field-type": "bool"
                },
                {
                    "field-name": "dropped",
                    "field-type": "[]string"
                },
                {
                    "field-name": "email",
                    "field-type": "string"
                },
                {
                    "field-name": "emailed",
                    "field-type": "bool"
                },
                {
                    "field-name": "enrolled",
                    "field-type": "[]string"
                },
                {
                    "field-name": "modified",
                    "field-type": "bool"
                },
                {
                    "field-name": "not-exists",
                    "field-type": "bool"
                },
                {
                    "field-name": "removed",
                    "field-type": "bool"
                },
                {
                    "field-name": "skipped",
                    "field-type": "bool"
                }
            ]
        },
        "model.CourseUserRole": {
            "alias-type": "int",
            "category": "alias"
        },
        "model.ExternalLocatableError": {
            "category": "struct",
            "description": "A user safe version of locatable errors.\nAll LocatableErrors must be converted to ExternalLocatableErrors\nif it is to be given to a user.",
            "fields": [
                {
                    "field-name": "locator",
                    "field-type": "string"
                },
                {
                    "field-name": "message",
                    "field-type": "string"
                }
            ]
        },
        "model.ExternalScoringInfo": {
            "category": "struct",
            "description": "A trimmed-down version of ScoringInfo meant for external usage.",
            "fields": [
                {
                    "field-name": "assignment",
                    "field-type": "string"
                },
                {
                    "field-name": "raw-score",
                    "field-type": "float64"
                },
                {
                    "field-name": "score",
                    "field-type": "float64"
                },
                {
                    "field-name": "submission-id",
                    "field-type": "string"
                },
                {
                    "field-name": "submission-time",
                    "field-type": "int64"
                },
                {
                    "field-name": "upload-time",
                    "field-type": "int64"
                },
                {
                    "field-name": "user",
                    "field-type": "string"
                }
            ]
        },
        "model.ExternalUserOpResult": {
            "category": "struct",
            "description": "A user safe representation of the UserOpResult struct.\nNotably all errors will be converted to responses and the cleartext password field is removed.\nFor descriptions of shared fields, see UserOpResult above.",
            "fields": [
                {
                    "field-name": "added",
                    "field-type": "bool"
                },
                {
                    "field-name": "communication-error",
                    "field-type": "*model.ExternalLocatableError"
                },
                {
                    "field-name": "dropped",
                    "field-type": "[]string"
                },
                {
                    "field-name": "email",
                    "field-type": "string"
                },
                {
                    "field-name": "emailed",
                    "field-type": "bool"
                },
                {
                    "field-name": "enrolled",
                    "field-type": "[]string"
                },
                {
                    "field-name": "modified",
                    "field-type": "bool"
                },
                {
                    "field-name": "not-exists",
                    "field-type": "bool"
                },
                {
                    "field-name": "removed",
                    "field-type": "bool"
                },
                {
                    "field-name": "skipped",
                    "field-type": "bool"
                },
                {
                    "field-name": "system-error",
                    "field-type": "*model.ExternalLocatableError"
                },
                {
                    "field-name": "validation-error",
                    "field-type": "*model.ExternalLocatableError"
                }
            ]
        },
        "model.FileSimilarity": {
            "category": "struct",
            "fields": [
                {
                    "field-name": "filename",
                    "field-type": "string"
                },
                {
                    "field-name": "options",
                    "field-type": "map[string]interface {}"
                },
                {
                    "field-name": "original-filename",
                    "field-type": "string"
                },
                {
                    "field-name": "score",
                    "field-type": "float64"
                },
                {
                    "field-name": "tool",
                    "field-type": "string"
                },
                {
                    "field-name": "version",
                    "field-type": "string"
                }
            ]
        },
        "model.GradedQuestion": {
            "category": "struct",
            "fields": [
                {
                    "field-name": "grading_end_time",
                    "field-type": "int64"
                },
                {
                    "field-name": "grading_start_time",
                    "field-type": "int64"
                },
                {
                    "field-name": "hard_fail",
                    "field-type": "bool"
                },
                {
                    "field-name": "max_points",
                    "field-type": "float64"
                },
                {
                    "field-name": "message",
                    "field-type": "string"
                },
                {
                    "field-name": "name",
                    "field-type": "string"
                },
                {
                    "field-name": "score",
                    "field-type": "float64"
                },
                {
                    "field-name": "skipped",
                    "field-type": "bool"
                }
            ]
        },
        "model.GradingInfo": {
            "category": "struct",
            "fields": [
                {
                    "field-name": "additional-info",
                    "field-type": "map[string]interface {}"
                },
                {
                    "field-name": "assignment-id",
                    "field-type": "string"
                },
                {
                    "field-name": "course-id",
                    "field-type": "string"
                },
                {
                    "field-name": "epilogue",
                    "field-type": "string"
                },
                {
                    "field-name": "grading_end_time",
                    "field-type": "int64"
                },
                {
                    "field-name": "grading_start_time",
                    "field-type": "int64"
                },
                {
                    "field-name": "id",
                    "field-type": "string"
                },
                {
                    "field-name": "max_points",
                    "field-type": "float64"
                },
                {
                    "field-name": "message",
                    "field-type": "string"
                },
                {
                    "field-name": "name",
                    "field-type": "string"
                },
                {
                    "field-name": "prologue",
                    "field-type": "string"
                },
                {
                    "field-name": "proxy-user",
                    "field-type": "string"
                },
                {
                    "field-name": "proxy_end_time",
                    "field-type": "int64"
                },
                {
                    "field-name": "proxy_start_time",
                    "field-type": "int64"
                },
                {
                    "field-name": "questions",
                    "field-type": "[]*model.GradedQuestion"
                },
                {
                    "field-name": "score",
                    "field-type": "float64"
                },
                {
                    "field-name": "short-id",
                    "field-type": "string"
                },
                {
                    "field-name": "user",
                    "field-type": "string"
                }
            ]
        },
        "model.GradingResult": {
            "category": "struct",
            "fields": [
                {
                    "field-name": "info",
                    "field-type": "*model.GradingInfo"
                },
                {
                    "field-name": "input-files-gzip",
                    "field-type": "map[string][]uint8"
                },
                {
                    "field-name": "output-files-gzip",
                    "field-type": "map[string][]uint8"
                },
                {
                    "field-name": "stderr",
                    "field-type": "string"
                },
                {
                    "field-name": "stdout",
                    "field-type": "string"
                }
            ]
        },
        "model.IndividualAnalysis": {
            "category": "struct",
            "fields": [
                {
                    "field-name": "analysis-timestamp",
                    "field-type": "int64"
                },
                {
                    "field-name": "assignment-id",
                    "field-type": "string"
                },
                {
                    "field-name": "course-id",
                    "field-type": "string"
                },
                {
                    "field-name": "failure",
                    "field-type": "bool"
                },
                {
                    "field-name": "failure-message",
                    "field-type": "string"
                },
                {
                    "field-name": "files",
                    "field-type": "[]model.AnalysisFileInfo"
                },
                {
                    "field-name": "lines-of-code",
                    "field-type": "int"
                },
                {
                    "field-name": "lines-of-code-delta",
                    "field-type": "int"
                },
                {
                    "field-name": "lines-of-code-per-hour",
                    "field-type": "float64"
                },
                {
                    "field-name": "options",
                    "field-type": "*model.AssignmentAnalysisOptions"
                },
                {
                    "field-name": "score",
                    "field-type": "float64"
                },
                {
                    "field-name": "score-delta",
                    "field-type": "float64"
                },
                {
                    "field-name": "score-per-hour",
                    "field-type": "float64"
                },
                {
                    "field-name": "short-id",
                    "field-type": "string"
                },
                {
                    "field-name": "skipped-files",
                    "field-type": "[]string"
                },
                {
                    "field-name": "submission-id",
                    "field-type": "string"
                },
                {
                    "field-name": "submission-start-time",
                    "field-type": "int64"
                },
                {
                    "field-name": "submission-time-delta",
                    "field-type": "int64"
                },
                {
                    "field-name": "user-email",
                    "field-type": "string"
                }
            ]
        },
        "model.IndividualAnalysisSummary": {
            "category": "struct",
            "fields": [
                {
                    "field-name": "aggregate-lines-of-code",
                    "field-type": "util.AggregateValues"
                },
                {
                    "field-name": "aggregate-lines-of-code-delta",
                    "field-type": "util.AggregateValues"
                },
                {
                    "field-name": "aggregate-lines-of-code-per-file",
                    "field-type": "map[string]util.AggregateValues"
                },
                {
                    "field-name": "aggregate-lines-of-code-per-hour",
                    "field-type": "util.AggregateValues"
                },
                {
                    "field-name": "aggregate-score",
                    "field-type": "util.AggregateValues"
                },
                {
                    "field-name": "aggregate-score-delta",
                    "field-type": "util.AggregateValues"
                },
                {
                    "field-name": "aggregate-score-per-hour",
                    "field-type": "util.AggregateValues"
                },
                {
                    "field-name": "aggregate-submission-time-delta",
                    "field-type": "util.AggregateValues"
                },
                {
                    "field-name": "complete",
                    "field-type": "bool"
                },
                {
                    "field-name": "complete-count",
                    "field-type": "int"
                },
                {
                    "field-name": "failure-count",
                    "field-type": "int"
                },
                {
                    "field-name": "first-timestamp",
                    "field-type": "int64"
                },
                {
                    "field-name": "last-timestamp",
                    "field-type": "int64"
                },
                {
                    "field-name": "pending-count",
                    "field-type": "int"
                }
            ]
        },
        "model.LMSSyncResult": {
            "category": "struct",
            "fields": [
                {
                    "field-name": "assignment-sync",
                    "field-type": "*model.AssignmentSyncResult"
                },
                {
                    "field-name": "user-sync",
                    "field-type": "[]*model.UserOpResult"
                }
            ]
        },
        "model.LocatableError": {
            "category": "struct",
            "description": "A general representation of errors that have a definite source location."
        },
        "model.PairwiseAnalysis": {
            "category": "struct",
            "fields": [
                {
                    "field-name": "analysis-timestamp",
                    "field-type": "int64"
                },
                {
                    "field-name": "failure",
                    "field-type": "bool"
                },
                {
                    "field-name": "failure-message",
                    "field-type": "string"
                },
                {
                    "field-name": "mean-similarities",
                    "field-type": "map[string]float64"
                },
                {
                    "field-name": "options",
                    "field-type": "*model.AssignmentAnalysisOptions"
                },
                {
                    "field-name": "similarities",
                    "field-type": "map[string][]*model.FileSimilarity"
                },
                {
                    "field-name": "skipped-files",
                    "field-type": "[]string"
                },
                {
                    "field-name": "submission-ids",
                    "field-type": "model.PairwiseKey"
                },
                {
                    "field-name": "total-mean-similarity",
                    "field-type": "float64"
                },
                {
                    "field-name": "unmatched-files",
                    "field-type": "[][]string"
                }
            ]
        },
        "model.PairwiseAnalysisSummary": {
            "category": "struct",
            "fields": [
                {
                    "field-name": "aggregate-mean-similarities",
                    "field-type": "map[string]util.AggregateValues"
                },
                {
                    "field-name": "aggregate-total-mean-similarity",
                    "field-type": "util.AggregateValues"
                },
                {
                    "field-name": "complete",
                    "field-type": "bool"
                },
                {
                    "field-name": "complete-count",
                    "field-type": "int"
                },
                {
                    "field-name": "failure-count",
                    "field-type": "int"
                },
                {
                    "field-name": "first-timestamp",
                    "field-type": "int64"
                },
                {
                    "field-name": "last-timestamp",
                    "field-type": "int64"
                },
                {
                    "field-name": "pending-count",
                    "field-type": "int"
                }
            ]
        },
        "model.PairwiseKey": {
            "category": "array",
            "element-type": "string"
        },
        "model.RawCourseUserData": {
            "category": "struct",
            "description": "Raw/dirty data for a course user.\nThis struct is used for raw data coming from a single course.",
            "fields": [
                {
                    "field-name": "course-lms-id",
                    "field-type": "string"
                },
                {
                    "field-name": "course-role",
                    "field-type": "string"
                },
                {
                    "field-name": "email",
                    "field-type": "string"
                },
                {
                    "field-name": "name",
                    "field-type": "string"
                }
            ]
        },
        "model.RawServerUserData": {
            "category": "struct",
            "description": "Raw/dirty data for a user.\nThis struct can be directly embedded for Kong arguments.",
            "fields": [
                {
                    "field-name": "course",
                    "field-type": "string"
                },
                {
                    "field-name": "course-lms-id",
                    "field-type": "string"
                },
                {
                    "field-name": "course-role",
                    "field-type": "string"
                },
                {
                    "field-name": "email",
                    "field-type": "string"
                },
                {
                    "field-name": "name",
                    "field-type": "string"
                },
                {
                    "field-name": "pass",
                    "field-type": "string"
                },
                {
                    "field-name": "role",
                    "field-type": "string"
                }
            ]
        },
        "model.ServerUserRole": {
            "alias-type": "int",
            "category": "alias"
        },
        "model.SubmissionHistoryItem": {
            "category": "struct",
            "fields": [
                {
                    "field-name": "assignment-id",
                    "field-type": "string"
                },
                {
                    "field-name": "course-id",
                    "field-type": "string"
                },
                {
                    "field-name": "grading_start_time",
                    "field-type": "int64"
                },
                {
                    "field-name": "id",
                    "field-type": "string"
                },
                {
                    "field-name": "max_points",
                    "field-type": "float64"
                },
                {
                    "field-name": "message",
                    "field-type": "string"
                },
                {
                    "field-name": "score",
                    "field-type": "float64"
                },
                {
                    "field-name": "short-id",
                    "field-type": "string"
                },
                {
                    "field-name": "user",
                    "field-type": "string"
                }
            ]
        },
        "model.UserOpResult": {
            "category": "struct",
            "description": "A general representation of the result of operations that modify a user in any way (add, remove, enroll, drop, etc).\nAll user-facing functions (essentially non-db functions) should return an instance or collection of these objects.",
            "fields": [
                {
                    "field-name": "added",
                    "field-type": "bool"
                },
                {
                    "field-name": "cleartext-password",
                    "field-type": "string"
                },
                {
                    "field-name": "communication-error",
                    "field-type": "*model.LocatableError"
                },
                {
                    "field-name": "dropped",
                    "field-type": "[]string"
                },
                {
                    "field-name": "email",
                    "field-type": "string"
                },
                {
                    "field-name": "emailed",
                    "field-type": "bool"
                },
                {
                    "field-name": "enrolled",
                    "field-type": "[]string"
                },
                {
                    "field-name": "modified",
                    "field-type": "bool"
                },
                {
                    "field-name": "not-exists",
                    "field-type": "bool"
                },
                {
                    "field-name": "removed",
                    "field-type": "bool"
                },
                {
                    "field-name": "skipped",
                    "field-type": "bool"
                },
                {
                    "field-name": "system-error",
                    "field-type": "*model.LocatableError"
                },
                {
                    "field-name": "validation-error",
                    "field-type": "*model.LocatableError"
                }
            ]
        },
        "stats.Metric": {
            "category": "struct",
            "fields": [
                {
                    "field-name": "attributes",
                    "field-type": "map[stats.MetricAttribute]interface {}"
                },
                {
                    "field-name": "timestamp",
                    "field-type": "int64"
                },
                {
                    "field-name": "type",
                    "field-type": "string"
                },
                {
                    "field-name": "value",
                    "field-type": "float64"
                }
            ]
        },
        "stats.MetricAttribute": {
            "alias-type": "string",
            "category": "alias"
        },
        "stats.MetricType": {
            "alias-type": "string",
            "category": "alias"
        },
        "stats.Query": {
            "category": "struct",
            "description": "The query for stats.\nNote that the semantics of this struct mean that times before UNIX epoch (negative times)\nmust be offset by at least one MS (as a zero value is treated as the end of time).",
            "fields": [
                {
                    "field-name": "after",
                    "field-type": "int64"
                },
                {
                    "field-name": "before",
                    "field-type": "int64"
                },
                {
                    "field-name": "limit",
                    "field-type": "int"
                },
                {
                    "field-name": "sort",
                    "field-type": "int"
                },
                {
                    "field-name": "type",
                    "field-type": "string"
                },
                {
                    "field-name": "where",
                    "field-type": "map[stats.MetricAttribute]interface {}"
                }
            ]
        },
        "timestamp.Timestamp": {
            "alias-type": "int64",
            "category": "alias"
        },
        "upload.RowEntry": {
            "category": "struct",
            "fields": [
                {
                    "field-name": "entry",
                    "field-type": "interface {}"
                },
                {
                    "field-name": "row",
                    "field-type": "int"
                }
            ]
        },
        "upload.ScoreEntry": {
            "category": "struct",
            "fields": [
                {
                    "field-name": "email",
                    "field-type": "string"
                },
                {
                    "field-name": "score",
                    "field-type": "float64"
                }
            ]
        },
        "users.UpsertUsersOptions": {
            "category": "struct",
            "description": "Data for upserting users.\nUpserting should only be done by server or course admins,\nit should not be used for self creation.",
            "fields": [
                {
                    "field-name": "dry-run",
                    "field-type": "bool"
                },
                {
                    "field-name": "raw-users",
                    "field-type": "[]*model.RawServerUserData"
                },
                {
                    "field-name": "send-emails",
                    "field-type": "bool"
                },
                {
                    "field-name": "skip-inserts",
                    "field-type": "bool"
                },
                {
                    "field-name": "skip-updates",
                    "field-type": "bool"
                }
            ]
        },
        "util.AggregateValues": {
            "category": "struct",
            "fields": [
                {
                    "field-name": "count",
                    "field-type": "int"
                },
                {
                    "field-name": "max",
                    "field-type": "float64"
                },
                {
                    "field-name": "mean",
                    "field-type": "float64"
                },
                {
                    "field-name": "median",
                    "field-type": "float64"
                },
                {
                    "field-name": "min",
                    "field-type": "float64"
                }
            ]
        },
        "util.CallStack": {
            "category": "struct",
            "fields": [
                {
                    "field-name": "name",
                    "field-type": "string"
                },
                {
                    "field-name": "records",
                    "field-type": "[]util.CallStackRecord"
                },
                {
                    "field-name": "status",
                    "field-type": "string"
                }
            ]
        },
        "util.CallStackRecord": {
            "category": "struct",
            "fields": [
                {
                    "field-name": "call",
                    "field-type": "string"
                },
                {
                    "field-name": "file",
                    "field-type": "string"
                },
                {
                    "field-name": "line",
                    "field-type": "int"
                },
                {
                    "field-name": "pointer",
                    "field-type": "string"
                }
            ]
        },
        "util.FileOperation": {
            "category": "array",
            "element-type": "string"
        },
        "util.FileSpec": {
            "category": "struct",
            "fields": [
                {
                    "field-name": "dest",
                    "field-type": "string"
                },
                {
                    "field-name": "path",
                    "field-type": "string"
                },
                {
                    "field-name": "reference",
                    "field-type": "string"
                },
                {
                    "field-name": "token",
                    "field-type": "string"
                },
                {
                    "field-name": "type",
                    "field-type": "string"
                },
                {
                    "field-name": "username",
                    "field-type": "string"
                }
            ]
        },
        "util.FileSpecType": {
            "alias-type": "string",
            "category": "alias"
        }
    }
}
